<?php

namespace AppBundle\Entity;

use Doctrine\ORM\AbstractQuery;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * VoitureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VoitureRepository extends EntityRepository
{
    public function custom(){
        return $this->createQueryBuilder('v')
                ->join('v.modeleMarque','modeleMarque')
                ->addSelect('modeleMarque')
                ->join('v.boitier','boitier')
                ->addSelect('boitier')
                ->join('v.carburant','carburant')
                ->addSelect('carburant')
                ->join('v.user','user')
                ->addSelect('user')
                ->leftJoin('v.images','image')
                ->addSelect('image')
                ->leftJoin('v.imagePrincipale','imagePrincipale')
                ->addSelect('imagePrincipale')
                ->leftJoin('v.postulants','postulant')
                ->addSelect('postulant');
    }
    public function customFind($id=null){
        if(!$id) return null;
        try{
            $resultat = $this->createQueryBuilder('v')
                ->join('v.modeleMarque','modeleMarque')
                ->addSelect('modeleMarque')
                ->join('v.boitier','boitier')
                ->addSelect('boitier')
                ->join('v.carburant','carburant')
                ->addSelect('carburant')
                ->join('v.user','user')
                ->addSelect('user')
                ->leftJoin('v.images','image')
                ->addSelect('image')
                ->leftJoin('v.imagePrincipale','imagePrincipale')
                ->addSelect('imagePrincipale')
                ->leftJoin('v.postulants','postulant')
                ->addSelect('postulant')
                ->where('v.id=:id')
                ->setParameter('id',$id)
                ->getQuery()
                ->getSingleResult();
        }catch (NoResultException $ex){
            return null;
        }


        return $resultat;
    }

    public function customFindAll(){
        $resultat = $this->custom()
                ->where('v.isPublish=:isPublish')
                ->setParameter('isPublish',true)
                ->orderBy('v.isVedette','DESC')
                ->getQuery();
                return $resultat;
    }

    public function customFindByUser(User $user){
        $resultat = $this->custom()
                ->where('v.isPublish=:isPublish')
                ->setParameter('isPublish',true)
                ->andWhere('user.id=:user')
                ->setParameter('user',$user)
                ->orderBy('v.isVedette','DESC')
                ->getQuery()
                ->getResult();
                return $resultat;
    }


    public function findVedette(){
            $resultat = $this->createQueryBuilder('v')
                ->where('v.isVedette=:isVedette')
                ->setParameter('isVedette',true)
                ->getQuery()
                ->getResult();

        return $resultat;
    }

    public function countVedette(){
        return $this->createQueryBuilder('v')
            ->select('count(v)')
            ->where('v.isVedette=:isVedette')
            ->setParameter('isVedette',true)
            ->getQuery()
            ->getSingleScalarResult();
    }
}
